
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace Refactored_triphets_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 99> locations_array__ = 
{" (found before start of program)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 140, column 3 to column 38)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 141, column 3 to column 36)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 142, column 3 to column 36)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 147, column 3 to column 32)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 148, column 3 to column 42)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 149, column 3 to column 34)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 150, column 3 to column 38)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 151, column 3 to column 34)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 152, column 3 to column 38)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 170, column 3 to column 27)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 170, column 28 to column 45)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 171, column 23 to column 40)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 171, column 3 to column 40)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 174, column 9 to line 176, column 22)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 173, column 6 to line 176, column 22)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 172, column 3 to line 176, column 22)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 177, column 3 to column 38)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 158, column 3 to column 30)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 159, column 3 to column 34)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 160, column 3 to column 27)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 161, column 3 to column 28)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 164, column 3 to line 165, column 70)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 125, column 3 to column 15)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 126, column 3 to column 15)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 127, column 13 to column 20)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 127, column 3 to column 26)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 128, column 28 to column 35)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 128, column 3 to column 39)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 129, column 22 to column 29)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 129, column 3 to column 35)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 130, column 33 to column 40)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 130, column 3 to column 42)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 131, column 3 to column 38)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 135, column 3 to column 38)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 170, column 18 to column 25)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 21, column 3 to column 43)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 20, column 0 to line 22, column 1)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 27, column 3 to column 42)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 28, column 3 to column 42)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 29, column 3 to column 42)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 30, column 3 to column 27)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 31, column 3 to column 27)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 32, column 3 to column 27)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 39, column 6 to column 15)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 38, column 8 to line 49, column 4)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 34, column 6 to line 37, column 46)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 33, column 3 to line 49, column 4)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 26, column 0 to line 50, column 1)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 54, column 58 to column 67)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 54, column 3 to column 67)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 55, column 3 to column 12)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 52, column 38 to line 56, column 1)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 58, column 33 to column 65)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 58, column 31 to column 67)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 63, column 3 to column 12)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 66, column 11 to column 24)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 65, column 35 to column 50)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 65, column 6 to line 66, column 24)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 64, column 3 to line 66, column 24)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 67, column 3 to column 12)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 60, column 69 to line 68, column 1)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 71, column 21 to column 30)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 71, column 3 to column 30)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 72, column 21 to column 30)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 72, column 3 to column 30)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 73, column 3 to column 12)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 70, column 37 to line 74, column 1)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 77, column 30 to column 41)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 77, column 3 to column 41)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 78, column 3 to column 12)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 76, column 37 to line 79, column 1)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 86, column 3 to column 12)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 87, column 3 to column 60)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 88, column 3 to line 89, column 48)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 90, column 3 to column 34)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 90, column 35 to column 66)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 91, column 3 to column 34)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 91, column 35 to column 58)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 92, column 3 to column 26)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 92, column 27 to column 50)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 95, column 3 to column 65)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 96, column 3 to column 47)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 97, column 3 to column 70)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 100, column 3 to column 70)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 104, column 3 to column 13)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 105, column 3 to column 56)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 107, column 3 to column 12)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 84, column 0 to line 108, column 1)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 114, column 14 to column 21)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 114, column 3 to column 23)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 114, column 44 to column 57)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 114, column 24 to column 57)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 117, column 9 to line 118, column 76)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 116, column 6 to line 118, column 76)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 115, column 26 to line 119, column 4)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 115, column 3 to line 119, column 4)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 120, column 3 to column 29)",
 " (in '/hpc/home/sh700/ase_models/Refactored_triphets.stan', line 113, column 0 to line 121, column 1)"};


template <bool propto__, typename T3__>
stan::promote_args_t<T3__>
binom_lpmf(const int& x, const int& n, const int& het, const T3__& p,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 36;
    return (het ?
              stan::math::promote_scalar<local_scalar_t__>(binomial_lpmf<false>(
                                                             x, n, p)) :
              stan::math::promote_scalar<local_scalar_t__>(0.0));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct binom_lpmf_functor__ {
template <bool propto__, typename T3__>
stan::promote_args_t<T3__>
operator()(const int& x, const int& n, const int& het, const T3__& p,
           std::ostream* pstream__)  const 
{
return binom_lpmf<propto__>(x, n, het, p, pstream__);
}
};

template <typename T7__, typename T8__, typename T9__>
stan::promote_args_t<T7__, T8__,
T9__>
computeElem(const std::vector<std::vector<std::vector<int>>>& count,
            const std::vector<std::vector<int>>& het,
            const std::vector<int>& isPhased, const int& site, const int& MI,
            const int& FI, const int& CI, const T7__& MP, const T8__& FP,
            const T9__& CP, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T7__, T8__, T9__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int MN;
    MN = std::numeric_limits<int>::min();
    
    current_statement__ = 38;
    MN = (rvalue(count, "count", index_uni(site), index_uni(1), index_uni(1))
           +
           rvalue(count, "count",
             index_uni(site), index_uni(1), index_uni(2)));
    int FN;
    FN = std::numeric_limits<int>::min();
    
    current_statement__ = 39;
    FN = (rvalue(count, "count", index_uni(site), index_uni(2), index_uni(1))
           +
           rvalue(count, "count",
             index_uni(site), index_uni(2), index_uni(2)));
    int CN;
    CN = std::numeric_limits<int>::min();
    
    current_statement__ = 40;
    CN = (rvalue(count, "count", index_uni(site), index_uni(3), index_uni(1))
           +
           rvalue(count, "count",
             index_uni(site), index_uni(3), index_uni(2)));
    int MC;
    MC = std::numeric_limits<int>::min();
    
    current_statement__ = 41;
    MC = rvalue(count, "count", index_uni(site), index_uni(1), index_uni(MI));
    int FC;
    FC = std::numeric_limits<int>::min();
    
    current_statement__ = 42;
    FC = rvalue(count, "count", index_uni(site), index_uni(2), index_uni(FI));
    int CC;
    CC = std::numeric_limits<int>::min();
    
    current_statement__ = 43;
    CC = rvalue(count, "count", index_uni(site), index_uni(3), index_uni(CI));
    current_statement__ = 47;
    if (rvalue(isPhased, "isPhased", index_uni(site))) {
      current_statement__ = 46;
      return ((binom_lpmf<false>(MC, MN,
                 rvalue(het, "het", index_uni(site), index_uni(1)),
                 MP, pstream__) +
                binom_lpmf<false>(FC, FN,
                  rvalue(het, "het", index_uni(site), index_uni(2)),
                  FP, pstream__)) +
               binom_lpmf<false>(CC, CN,
                 rvalue(het, "het", index_uni(site), index_uni(3)),
                 CP, pstream__));
    } else {
      current_statement__ = 44;
      return 0;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct computeElem_functor__ {
template <typename T7__, typename T8__, typename T9__>
stan::promote_args_t<T7__, T8__,
T9__>
operator()(const std::vector<std::vector<std::vector<int>>>& count,
           const std::vector<std::vector<int>>& het,
           const std::vector<int>& isPhased, const int& site, const int& MI,
           const int& FI, const int& CI, const T7__& MP, const T8__& FP,
           const T9__& CP, std::ostream* pstream__)  const 
{
return computeElem(count, het, isPhased, site, MI, FI, CI, MP, FP, CP,
         pstream__);
}
};

int
countDenovos(const int& parent, const std::vector<std::vector<int>>& V,
             std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 50;
    if ((primitive_value((primitive_value(
        logical_eq(rvalue(V, "V", index_uni(parent), index_uni(1)), 0)) &&
        primitive_value(
        logical_eq(rvalue(V, "V", index_uni(parent), index_uni(2)), 0)))) &&
        primitive_value(
        logical_eq(rvalue(V, "V", index_uni(3), index_uni(parent)), 1)))) {
      current_statement__ = 49;
      return 1;
    } 
    current_statement__ = 51;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct countDenovos_functor__ {
int
operator()(const int& parent, const std::vector<std::vector<int>>& V,
           std::ostream* pstream__)  const 
{
return countDenovos(parent, V, pstream__);
}
};

int
isHet(const int& parent, const std::vector<std::vector<int>>& V,
      std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 53;
    return logical_neq(rvalue(V, "V", index_uni(parent), index_uni(1)),
             rvalue(V, "V", index_uni(parent), index_uni(2)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct isHet_functor__ {
int
operator()(const int& parent, const std::vector<std::vector<int>>& V,
           std::ostream* pstream__)  const 
{
return isHet(parent, V, pstream__);
}
};

template <typename T2__, typename T3__>
stan::promote_args_t<T2__,
T3__>
recombTerm(const int& parent, const std::vector<std::vector<int>>& V,
           const T2__& logRecomb, const T3__& logNoRecomb,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ s;
    s = DUMMY_VAR__;
    
    current_statement__ = 55;
    s = 0;
    current_statement__ = 59;
    if (isHet(parent, V, pstream__)) {
      current_statement__ = 58;
      if (logical_eq(rvalue(V, "V", index_uni(3), index_uni(parent)),
            rvalue(V, "V", index_uni(parent), index_uni(1)))) {
        current_statement__ = 57;
        s = (s + logNoRecomb);
      } else {
        current_statement__ = 56;
        s = (s + logRecomb);
      }
    } 
    current_statement__ = 60;
    return s;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct recombTerm_functor__ {
template <typename T2__, typename T3__>
stan::promote_args_t<T2__,
T3__>
operator()(const int& parent, const std::vector<std::vector<int>>& V,
           const T2__& logRecomb, const T3__& logNoRecomb,
           std::ostream* pstream__)  const 
{
return recombTerm(parent, V, logRecomb, logNoRecomb, pstream__);
}
};

int
affectedCopy(const int& indiv, const std::vector<std::vector<int>>& V,
             std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 63;
    if (logical_eq(rvalue(V, "V", index_uni(indiv), index_uni(1)), 1)) {
      current_statement__ = 62;
      return 1;
    } 
    current_statement__ = 65;
    if (logical_eq(rvalue(V, "V", index_uni(indiv), index_uni(2)), 1)) {
      current_statement__ = 64;
      return 2;
    } 
    current_statement__ = 66;
    return 1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct affectedCopy_functor__ {
int
operator()(const int& indiv, const std::vector<std::vector<int>>& V,
           std::ostream* pstream__)  const 
{
return affectedCopy(indiv, V, pstream__);
}
};

template <typename T2__>
stan::promote_args_t<T2__>
getP(const int& indiv, const std::vector<std::vector<int>>& V, const T2__& p,
     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 69;
    if (logical_eq(rvalue(V, "V", index_uni(indiv), index_uni(1)),
          rvalue(V, "V", index_uni(indiv), index_uni(2)))) {
      current_statement__ = 68;
      return 0.5;
    } 
    current_statement__ = 70;
    return p;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct getP_functor__ {
template <typename T2__>
stan::promote_args_t<T2__>
operator()(const int& indiv, const std::vector<std::vector<int>>& V,
           const T2__& p, std::ostream* pstream__)  const 
{
return getP(indiv, V, p, pstream__);
}
};

template <typename T4__, typename T5__, typename T6__, typename T7__,
typename T8__, typename T9__, typename T10__>
stan::promote_args_t<T4__, T5__, T6__, T7__, T8__, stan::promote_args_t<T9__,
T10__>>
modeLik(const int& site, const std::vector<std::vector<int>>& mode,
        const std::vector<std::vector<std::vector<int>>>& count,
        const std::vector<std::vector<int>>& het, const T4__& logAffected,
        const T5__& logUnaffected, const T6__& logDenovo,
        const T7__& logNoDenovo, const T8__& logRecomb,
        const T9__& logNoRecomb, const T10__& p, const int& N_SITES,
        const std::vector<int>& isPhased, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T4__,
          T5__,
          T6__,
          T7__,
          T8__, stan::promote_args_t<T9__,
          T10__>>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ s;
    s = DUMMY_VAR__;
    
    current_statement__ = 72;
    s = 0;
    int numDenovos;
    numDenovos = std::numeric_limits<int>::min();
    
    current_statement__ = 73;
    numDenovos = (countDenovos(1, mode, pstream__) +
                   countDenovos(2, mode, pstream__));
    local_scalar_t__ recomb;
    recomb = DUMMY_VAR__;
    
    current_statement__ = 74;
    recomb = (recombTerm(1, mode, logRecomb, logNoRecomb, pstream__) +
               recombTerm(2, mode, logRecomb, logNoRecomb, pstream__));
    int mCopy;
    mCopy = std::numeric_limits<int>::min();
    
    current_statement__ = 75;
    mCopy = affectedCopy(1, mode, pstream__);
    int fCopy;
    fCopy = std::numeric_limits<int>::min();
    
    current_statement__ = 76;
    fCopy = affectedCopy(2, mode, pstream__);
    int cCopy;
    cCopy = std::numeric_limits<int>::min();
    
    current_statement__ = 77;
    cCopy = affectedCopy(3, mode, pstream__);
    local_scalar_t__ mP;
    mP = DUMMY_VAR__;
    
    current_statement__ = 78;
    mP = getP(1, mode, p, pstream__);
    local_scalar_t__ fP;
    fP = DUMMY_VAR__;
    
    current_statement__ = 79;
    fP = getP(2, mode, p, pstream__);
    local_scalar_t__ cP;
    cP = DUMMY_VAR__;
    
    current_statement__ = 80;
    cP = getP(3, mode, p, pstream__);
    int numParentAffected;
    numParentAffected = std::numeric_limits<int>::min();
    
    current_statement__ = 81;
    numParentAffected = (((rvalue(mode, "mode", index_uni(1), index_uni(1)) +
                            rvalue(mode, "mode", index_uni(1), index_uni(2)))
                           +
                           rvalue(mode, "mode", index_uni(2), index_uni(1)))
                          + rvalue(mode, "mode", index_uni(2), index_uni(2)));
    int numParentUnaffected;
    numParentUnaffected = std::numeric_limits<int>::min();
    
    current_statement__ = 82;
    numParentUnaffected = (4 - numParentAffected);
    current_statement__ = 83;
    s = (s +
          ((numParentAffected * logAffected) +
            (numParentUnaffected * logUnaffected)));
    current_statement__ = 84;
    s = (s +
          computeElem(count, het, isPhased, site, mCopy, fCopy, cCopy, mP,
            fP, cP, pstream__));
    current_statement__ = 85;
    s = (s + recomb);
    current_statement__ = 86;
    s = (s + ((numDenovos * logDenovo) + ((2 - numDenovos) * logNoDenovo)));
    current_statement__ = 87;
    return s;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct modeLik_functor__ {
template <typename T4__, typename T5__, typename T6__, typename T7__,
typename T8__, typename T9__, typename T10__>
stan::promote_args_t<T4__, T5__, T6__, T7__, T8__, stan::promote_args_t<T9__,
T10__>>
operator()(const int& site, const std::vector<std::vector<int>>& mode,
           const std::vector<std::vector<std::vector<int>>>& count,
           const std::vector<std::vector<int>>& het, const T4__& logAffected,
           const T5__& logUnaffected, const T6__& logDenovo,
           const T7__& logNoDenovo, const T8__& logRecomb,
           const T9__& logNoRecomb, const T10__& p, const int& N_SITES,
           const std::vector<int>& isPhased, std::ostream* pstream__)  const 
{
return modeLik(site, mode, count, het, logAffected, logUnaffected, logDenovo,
         logNoDenovo, logRecomb, logNoRecomb, p, N_SITES, isPhased,
         pstream__);
}
};

template <typename T4__, typename T5__, typename T6__, typename T7__,
typename T8__, typename T9__, typename T10__>
stan::promote_args_t<T4__, T5__, T6__, T7__, T8__, stan::promote_args_t<T9__,
T10__>>
likelihoods(const int& N_MODES,
            const std::vector<std::vector<std::vector<int>>>& modes,
            const std::vector<std::vector<std::vector<int>>>& count,
            const std::vector<std::vector<int>>& het,
            const T4__& logAffected, const T5__& logUnaffected,
            const T6__& logDenovo, const T7__& logNoDenovo,
            const T8__& logRecomb, const T9__& logNoRecomb, const T10__& p,
            const int& N_SITES, const std::vector<int>& isPhased,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T4__,
          T5__,
          T6__,
          T7__,
          T8__, stan::promote_args_t<T9__,
          T10__>>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 89;
    validate_non_negative_index("array", "N_MODES", N_MODES);
    std::vector<local_scalar_t__> array;
    array = std::vector<local_scalar_t__>(N_MODES, DUMMY_VAR__);
    
    current_statement__ = 92;
    for (int i = 1; i <= N_MODES; ++i) {
      current_statement__ = 91;
      assign(array, 0.0, "assigning variable array", index_uni(i));
    }
    current_statement__ = 96;
    for (int site = 1; site <= N_SITES; ++site) {
      current_statement__ = 94;
      for (int i = 1; i <= N_MODES; ++i) {
        current_statement__ = 93;
        assign(array,
          (rvalue(array, "array", index_uni(i)) +
            modeLik(site, rvalue(modes, "modes", index_uni(i)), count, het,
              logAffected, logUnaffected, logDenovo, logNoDenovo, logRecomb,
              logNoRecomb, p, N_SITES, isPhased, pstream__)),
          "assigning variable array", index_uni(i));
      }
    }
    current_statement__ = 97;
    return log_sum_exp(array);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct likelihoods_functor__ {
template <typename T4__, typename T5__, typename T6__, typename T7__,
typename T8__, typename T9__, typename T10__>
stan::promote_args_t<T4__, T5__, T6__, T7__, T8__, stan::promote_args_t<T9__,
T10__>>
operator()(const int& N_MODES,
           const std::vector<std::vector<std::vector<int>>>& modes,
           const std::vector<std::vector<std::vector<int>>>& count,
           const std::vector<std::vector<int>>& het, const T4__& logAffected,
           const T5__& logUnaffected, const T6__& logDenovo,
           const T7__& logNoDenovo, const T8__& logRecomb,
           const T9__& logNoRecomb, const T10__& p, const int& N_SITES,
           const std::vector<int>& isPhased, std::ostream* pstream__)  const 
{
return likelihoods(N_MODES, modes, count, het, logAffected, logUnaffected,
         logDenovo, logNoDenovo, logRecomb, logNoRecomb, p, N_SITES,
         isPhased, pstream__);
}
};

class Refactored_triphets_model final : public model_base_crtp<Refactored_triphets_model> {

 private:
  int N_SITES;
  int N_MODES;
  std::vector<std::vector<std::vector<int>>> modes;
  std::vector<std::vector<int>> het;
  std::vector<std::vector<std::vector<int>>> count;
  std::vector<int> isPhased;
  double probAffected;
  double logAffected; 
  
 
 public:
  ~Refactored_triphets_model() { }
  
  inline std::string model_name() const final { return "Refactored_triphets_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  Refactored_triphets_model(stan::io::var_context& context__,
                            unsigned int random_seed__ = 0,
                            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "Refactored_triphets_model_namespace::Refactored_triphets_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 23;
      context__.validate_dims("data initialization","N_SITES","int",
           std::vector<size_t>{});
      N_SITES = std::numeric_limits<int>::min();
      
      current_statement__ = 23;
      N_SITES = context__.vals_i("N_SITES")[(1 - 1)];
      current_statement__ = 24;
      context__.validate_dims("data initialization","N_MODES","int",
           std::vector<size_t>{});
      N_MODES = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      N_MODES = context__.vals_i("N_MODES")[(1 - 1)];
      current_statement__ = 25;
      validate_non_negative_index("modes", "N_MODES", N_MODES);
      current_statement__ = 26;
      context__.validate_dims("data initialization","modes","int",
           std::vector<size_t>{static_cast<size_t>(N_MODES),
            static_cast<size_t>(3), static_cast<size_t>(2)});
      modes = std::vector<std::vector<std::vector<int>>>(N_MODES, std::vector<std::vector<int>>(3, std::vector<int>(2, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> modes_flat__;
        current_statement__ = 26;
        modes_flat__ = context__.vals_i("modes");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 26;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 26;
            for (int sym3__ = 1; sym3__ <= N_MODES; ++sym3__) {
              current_statement__ = 26;
              assign(modes, modes_flat__[(pos__ - 1)],
                "assigning variable modes", index_uni(sym3__),
                                              index_uni(sym2__),
                                              index_uni(sym1__));
              current_statement__ = 26;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 27;
      validate_non_negative_index("het", "N_SITES", N_SITES);
      current_statement__ = 28;
      context__.validate_dims("data initialization","het","int",
           std::vector<size_t>{static_cast<size_t>(N_SITES),
            static_cast<size_t>(3)});
      het = std::vector<std::vector<int>>(N_SITES, std::vector<int>(3, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> het_flat__;
        current_statement__ = 28;
        het_flat__ = context__.vals_i("het");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 28;
          for (int sym2__ = 1; sym2__ <= N_SITES; ++sym2__) {
            current_statement__ = 28;
            assign(het, het_flat__[(pos__ - 1)],
              "assigning variable het", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 28;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N_SITES; ++sym1__) {
        current_statement__ = 28;
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          current_statement__ = 28;
          check_greater_or_equal(function__, "het[sym1__, sym2__]",
                                 het[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N_SITES; ++sym1__) {
        current_statement__ = 28;
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          current_statement__ = 28;
          check_less_or_equal(function__, "het[sym1__, sym2__]",
                              het[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 29;
      validate_non_negative_index("count", "N_SITES", N_SITES);
      current_statement__ = 30;
      context__.validate_dims("data initialization","count","int",
           std::vector<size_t>{static_cast<size_t>(N_SITES),
            static_cast<size_t>(3), static_cast<size_t>(2)});
      count = std::vector<std::vector<std::vector<int>>>(N_SITES, std::vector<std::vector<int>>(3, std::vector<int>(2, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> count_flat__;
        current_statement__ = 30;
        count_flat__ = context__.vals_i("count");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 30;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 30;
            for (int sym3__ = 1; sym3__ <= N_SITES; ++sym3__) {
              current_statement__ = 30;
              assign(count, count_flat__[(pos__ - 1)],
                "assigning variable count", index_uni(sym3__),
                                              index_uni(sym2__),
                                              index_uni(sym1__));
              current_statement__ = 30;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= N_SITES; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          current_statement__ = 30;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 30;
            check_greater_or_equal(function__,
                                   "count[sym1__, sym2__, sym3__]",
                                   count[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);
          }
        }
      }
      current_statement__ = 31;
      validate_non_negative_index("isPhased", "N_SITES", N_SITES);
      current_statement__ = 32;
      context__.validate_dims("data initialization","isPhased","int",
           std::vector<size_t>{static_cast<size_t>(N_SITES)});
      isPhased = std::vector<int>(N_SITES, std::numeric_limits<int>::min());
      
      current_statement__ = 32;
      isPhased = context__.vals_i("isPhased");
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N_SITES; ++sym1__) {
        current_statement__ = 32;
        check_greater_or_equal(function__, "isPhased[sym1__]",
                               isPhased[(sym1__ - 1)], 0);
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N_SITES; ++sym1__) {
        current_statement__ = 32;
        check_less_or_equal(function__, "isPhased[sym1__]",
                            isPhased[(sym1__ - 1)], 1);
      }
      current_statement__ = 33;
      context__.validate_dims("data initialization","probAffected","double",
           std::vector<size_t>{});
      probAffected = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 33;
      probAffected = context__.vals_r("probAffected")[(1 - 1)];
      current_statement__ = 33;
      check_greater_or_equal(function__, "probAffected", probAffected, 0);
      current_statement__ = 33;
      check_less_or_equal(function__, "probAffected", probAffected, 1);
      current_statement__ = 34;
      logAffected = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 34;
      logAffected = stan::math::log(probAffected);
      current_statement__ = 35;
      validate_non_negative_index("numerator", "N_MODES", N_MODES);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "Refactored_triphets_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ theta;
      theta = DUMMY_VAR__;
      
      current_statement__ = 1;
      theta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0.000001, 1, lp__);
      local_scalar_t__ probRecomb;
      probRecomb = DUMMY_VAR__;
      
      current_statement__ = 2;
      probRecomb = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                     0, 1, lp__);
      local_scalar_t__ probDenovo;
      probDenovo = DUMMY_VAR__;
      
      current_statement__ = 3;
      probDenovo = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                     0, 1, lp__);
      local_scalar_t__ p;
      p = DUMMY_VAR__;
      
      current_statement__ = 4;
      p = (theta / (1 + theta));
      local_scalar_t__ logUnaffected;
      logUnaffected = DUMMY_VAR__;
      
      current_statement__ = 5;
      logUnaffected = stan::math::log((1 - probAffected));
      local_scalar_t__ logDenovo;
      logDenovo = DUMMY_VAR__;
      
      current_statement__ = 6;
      logDenovo = stan::math::log(probDenovo);
      local_scalar_t__ logNoDenovo;
      logNoDenovo = DUMMY_VAR__;
      
      current_statement__ = 7;
      logNoDenovo = stan::math::log((1 - probDenovo));
      local_scalar_t__ logRecomb;
      logRecomb = DUMMY_VAR__;
      
      current_statement__ = 8;
      logRecomb = stan::math::log(probRecomb);
      local_scalar_t__ logNoRecomb;
      logNoRecomb = DUMMY_VAR__;
      
      current_statement__ = 9;
      logNoRecomb = stan::math::log((1 - probRecomb));
      {
        current_statement__ = 18;
        lp_accum__.add(normal_lpdf<propto__>(stan::math::log2(theta), 0, 1));
        current_statement__ = 19;
        lp_accum__.add(-stan::math::log((theta * stan::math::log(2))));
        current_statement__ = 20;
        lp_accum__.add(beta_lpdf<propto__>(probRecomb, 1, 99));
        current_statement__ = 21;
        lp_accum__.add(beta_lpdf<propto__>(probDenovo, 1, 999));
        current_statement__ = 22;
        lp_accum__.add(
          likelihoods(N_MODES, modes, count, het, logAffected, logUnaffected,
            logDenovo, logNoDenovo, logRecomb, logNoRecomb, p, N_SITES,
            isPhased, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "Refactored_triphets_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      theta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0.000001, 1, lp__);
      double probRecomb;
      probRecomb = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      probRecomb = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                     0, 1, lp__);
      double probDenovo;
      probDenovo = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      probDenovo = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                     0, 1, lp__);
      double p;
      p = std::numeric_limits<double>::quiet_NaN();
      
      double logUnaffected;
      logUnaffected = std::numeric_limits<double>::quiet_NaN();
      
      double logDenovo;
      logDenovo = std::numeric_limits<double>::quiet_NaN();
      
      double logNoDenovo;
      logNoDenovo = std::numeric_limits<double>::quiet_NaN();
      
      double logRecomb;
      logRecomb = std::numeric_limits<double>::quiet_NaN();
      
      double logNoRecomb;
      logNoRecomb = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(theta);
      vars__.emplace_back(probRecomb);
      vars__.emplace_back(probDenovo);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      p = (theta / (1 + theta));
      current_statement__ = 5;
      logUnaffected = stan::math::log((1 - probAffected));
      current_statement__ = 6;
      logDenovo = stan::math::log(probDenovo);
      current_statement__ = 7;
      logNoDenovo = stan::math::log((1 - probDenovo));
      current_statement__ = 8;
      logRecomb = stan::math::log(probRecomb);
      current_statement__ = 9;
      logNoRecomb = stan::math::log((1 - probRecomb));
      if (emit_transformed_parameters__) {
        vars__.emplace_back(p);
        vars__.emplace_back(logUnaffected);
        vars__.emplace_back(logDenovo);
        vars__.emplace_back(logNoDenovo);
        vars__.emplace_back(logRecomb);
        vars__.emplace_back(logNoRecomb);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> numerator;
      numerator = std::vector<double>(N_MODES, std::numeric_limits<double>::quiet_NaN());
      
      
      double denominator;
      denominator = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      for (int i = 1; i <= N_MODES; ++i) {
        current_statement__ = 12;
        assign(numerator, 0.0, "assigning variable numerator", index_uni(i));
      }
      current_statement__ = 16;
      for (int site = 1; site <= N_SITES; ++site) {
        current_statement__ = 15;
        for (int i = 1; i <= N_MODES; ++i) {
          current_statement__ = 14;
          assign(numerator,
            (rvalue(numerator, "numerator", index_uni(i)) +
              modeLik(site, rvalue(modes, "modes", index_uni(i)), count, het,
                logAffected, logUnaffected, logDenovo, logNoDenovo,
                logRecomb, logNoRecomb, p, N_SITES, isPhased, pstream__)),
            "assigning variable numerator", index_uni(i));
        }
      }
      current_statement__ = 17;
      denominator = log_sum_exp(numerator);
      for (int sym1__ = 1; sym1__ <= N_MODES; ++sym1__) {
        vars__.emplace_back(numerator[(sym1__ - 1)]);
      }
      vars__.emplace_back(denominator);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      theta = context__.vals_r("theta")[(1 - 1)];
      double theta_free__;
      theta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      theta_free__ = stan::math::lub_free(theta, 0.000001, 1);
      double probRecomb;
      probRecomb = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      probRecomb = context__.vals_r("probRecomb")[(1 - 1)];
      double probRecomb_free__;
      probRecomb_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      probRecomb_free__ = stan::math::lub_free(probRecomb, 0, 1);
      double probDenovo;
      probDenovo = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      probDenovo = context__.vals_r("probDenovo")[(1 - 1)];
      double probDenovo_free__;
      probDenovo_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      probDenovo_free__ = stan::math::lub_free(probDenovo, 0, 1);
      vars__.emplace_back(theta_free__);
      vars__.emplace_back(probRecomb_free__);
      vars__.emplace_back(probDenovo_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"theta", "probRecomb", "probDenovo",
      "p", "logUnaffected", "logDenovo", "logNoDenovo", "logRecomb",
      "logNoRecomb", "numerator", "denominator"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_MODES)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "probRecomb");
    param_names__.emplace_back(std::string() + "probDenovo");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "p");
      param_names__.emplace_back(std::string() + "logUnaffected");
      param_names__.emplace_back(std::string() + "logDenovo");
      param_names__.emplace_back(std::string() + "logNoDenovo");
      param_names__.emplace_back(std::string() + "logRecomb");
      param_names__.emplace_back(std::string() + "logNoRecomb");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_MODES; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "numerator" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "denominator");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "probRecomb");
    param_names__.emplace_back(std::string() + "probDenovo");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "p");
      param_names__.emplace_back(std::string() + "logUnaffected");
      param_names__.emplace_back(std::string() + "logDenovo");
      param_names__.emplace_back(std::string() + "logNoDenovo");
      param_names__.emplace_back(std::string() + "logRecomb");
      param_names__.emplace_back(std::string() + "logNoRecomb");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_MODES; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "numerator" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "denominator");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"probRecomb\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"probDenovo\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logUnaffected\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logDenovo\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logNoDenovo\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logRecomb\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logNoRecomb\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"numerator\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_MODES) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"denominator\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"probRecomb\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"probDenovo\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logUnaffected\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logDenovo\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logNoDenovo\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logRecomb\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logNoRecomb\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"numerator\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_MODES) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"denominator\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = Refactored_triphets_model_namespace::Refactored_triphets_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return Refactored_triphets_model_namespace::profiles__;
}

#endif


